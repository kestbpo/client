{"ast":null,"code":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar React = require('react');\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\nvar throttle = function (callback, limit) {\n  var tick = false;\n  return function () {\n    if (!tick) {\n      callback();\n      tick = true;\n      setTimeout(function () {\n        tick = false;\n      }, limit);\n    }\n  };\n};\nvar ScrollSpy = function (_a) {\n  var children = _a.children,\n    // refs\n    navContainerRef = _a.navContainerRef,\n    parentScrollContainerRef = _a.parentScrollContainerRef,\n    // throttle\n    _b = _a.scrollThrottle,\n    // throttle\n    scrollThrottle = _b === void 0 ? 300 : _b,\n    // callback\n    onUpdateCallback = _a.onUpdateCallback,\n    // offsets\n    _c = _a.offsetTop,\n    // offsets\n    offsetTop = _c === void 0 ? 0 : _c,\n    _d = _a.offsetBottom,\n    offsetBottom = _d === void 0 ? 0 : _d,\n    // customize attributes\n    _e = _a.useDataAttribute,\n    // customize attributes\n    useDataAttribute = _e === void 0 ? \"to-scrollspy-id\" : _e,\n    _f = _a.activeClass,\n    activeClass = _f === void 0 ? \"active-scroll-spy\" : _f,\n    _g = _a.useBoxMethod,\n    useBoxMethod = _g === void 0 ? true : _g,\n    _h = _a.updateHistoryStack,\n    updateHistoryStack = _h === void 0 ? true : _h;\n  var scrollContainerRef = React.useRef(null);\n  var _j = React.useState(),\n    navContainerItems = _j[0],\n    setNavContainerItems = _j[1]; // prettier-ignore\n  // keeps track of the Id in navcontainer which is active\n  // so as to not update classLists unless it has been updated\n  var prevIdTracker = React.useRef(\"\");\n  // To get the nav container items depending on whether the parent ref for the nav container is passed or not\n  React.useEffect(function () {\n    var _a;\n    navContainerRef ? setNavContainerItems((_a = navContainerRef.current) === null || _a === void 0 ? void 0 : _a.querySelectorAll(\"[data-\".concat(useDataAttribute, \"]\"))) : setNavContainerItems(document.querySelectorAll(\"[data-\".concat(useDataAttribute, \"]\")));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [navContainerRef]);\n  // fire once after nav container items are set\n  React.useEffect(function () {\n    checkAndUpdateActiveScrollSpy();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [navContainerItems]);\n  var isVisible = function (el) {\n    var rectInView = el.getBoundingClientRect();\n    if (useBoxMethod) {\n      var useHeight = (parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current) ? parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current.offsetHeight : window.innerHeight;\n      var hitbox_top = useHeight;\n      var element_top = rectInView.top;\n      var element_bottom = rectInView.top + useHeight;\n      return hitbox_top < element_bottom + offsetBottom && hitbox_top > element_top - offsetTop;\n    } else {\n      // this decides how much of the element should be visible\n      var leniency = (parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current) ? (parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current.offsetHeight) * 0.5 : window.innerHeight * 0.5;\n      var useHeight = (parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current) ? parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current.offsetHeight : window.innerHeight;\n      return rectInView.top + leniency + offsetTop >= 0 && rectInView.bottom - leniency - offsetBottom <= useHeight;\n    }\n  };\n  var checkAndUpdateActiveScrollSpy = function () {\n    var scrollParentContainer = scrollContainerRef.current;\n    // if there are no children, return\n    if (!(scrollParentContainer && navContainerItems)) return;\n    var _loop_1 = function (i) {\n      // get child element\n      var useChild = scrollParentContainer.children.item(i);\n      var elementIsVisible = isVisible(useChild);\n      // check if the element is in the viewport\n      if (elementIsVisible) {\n        // if so, get its ID\n        var changeHighlightedItemId_1 = useChild.id;\n        // if the element was same as the one currently active ignore it\n        if (prevIdTracker.current === changeHighlightedItemId_1) return {\n          value: void 0\n        };\n        // now loop over each element in the nav Container\n        navContainerItems.forEach(function (el) {\n          var attrId = el.getAttribute(\"data-\".concat(useDataAttribute));\n          // if the element contains 'active' the class remove it\n          if (el.classList.contains(activeClass)) {\n            el.classList.remove(activeClass);\n          }\n          // check if its ID matches the ID we got from the viewport\n          // also make sure it does not already contain the 'active' class\n          if (attrId === changeHighlightedItemId_1 && !el.classList.contains(activeClass)) {\n            el.classList.add(activeClass);\n            if (onUpdateCallback) {\n              onUpdateCallback(changeHighlightedItemId_1);\n            }\n            prevIdTracker.current = changeHighlightedItemId_1;\n            if (updateHistoryStack) {\n              window.history.replaceState({}, \"\", \"#\".concat(changeHighlightedItemId_1));\n            }\n          }\n        });\n        return \"break\";\n      }\n    };\n    // loop over all children in scroll container\n    for (var i = 0; i < scrollParentContainer.children.length; i++) {\n      var state_1 = _loop_1(i);\n      if (typeof state_1 === \"object\") return state_1.value;\n      if (state_1 === \"break\") break;\n    }\n  };\n  React.useEffect(function () {\n    var _a;\n    // listen for scroll event\n    parentScrollContainerRef ?\n    // if ref for scrollable div is provided\n    (_a = parentScrollContainerRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener(\"scroll\", throttle(checkAndUpdateActiveScrollSpy, scrollThrottle)) :\n    // else listen for scroll in window\n    window.addEventListener(\"scroll\", throttle(checkAndUpdateActiveScrollSpy, scrollThrottle));\n  });\n  return React__namespace.createElement(\"div\", {\n    ref: scrollContainerRef\n  }, children);\n};\nexports[\"default\"] = ScrollSpy;","map":{"version":3,"names":["throttle","callback","limit","tick","setTimeout","ScrollSpy","_a","children","navContainerRef","parentScrollContainerRef","_b","scrollThrottle","onUpdateCallback","_c","offsetTop","_d","offsetBottom","_e","useDataAttribute","_f","activeClass","_g","useBoxMethod","_h","updateHistoryStack","scrollContainerRef","React","useRef","_j","useState","navContainerItems","setNavContainerItems","prevIdTracker","useEffect","current","querySelectorAll","concat","document","checkAndUpdateActiveScrollSpy","isVisible","el","rectInView","getBoundingClientRect","useHeight","offsetHeight","window","innerHeight","hitbox_top","element_top","top","element_bottom","leniency","bottom","scrollParentContainer","i","useChild","item","elementIsVisible","changeHighlightedItemId_1","id","value","forEach","attrId","getAttribute","classList","contains","remove","add","history","replaceState","length","addEventListener","React__namespace","createElement","ref"],"sources":["C:\\Users\\mohan\\KESTBPO\\client\\node_modules\\react-ui-scrollspy\\src\\utils\\throttle.ts","C:\\Users\\mohan\\KESTBPO\\client\\node_modules\\react-ui-scrollspy\\src\\ScrollSpy\\ScrollSpy.tsx"],"sourcesContent":["export const throttle = (callback: () => void, limit: number) => {\n  var tick = false;\n\n  return () => {\n    if (!tick) {\n      callback();\n      tick = true;\n      setTimeout(function () {\n        tick = false;\n      }, limit);\n    }\n  };\n};\n","import * as React from \"react\";\nimport {\n  MutableRefObject,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { throttle } from \"../utils/throttle\";\n\ninterface ScrollSpyProps {\n  children: ReactNode;\n\n  // refs\n  navContainerRef?: MutableRefObject<HTMLDivElement | null>;\n  parentScrollContainerRef?: MutableRefObject<HTMLDivElement | null>;\n\n  // throttle\n  scrollThrottle?: number;\n\n  // callback\n  onUpdateCallback?: (id: string) => void;\n\n  // offsets\n  offsetTop?: number;\n  offsetBottom?: number;\n\n  // customize attributes\n  useDataAttribute?: string;\n  activeClass?: string;\n\n  useBoxMethod?: boolean;\n  updateHistoryStack?: boolean;\n}\n\nconst ScrollSpy = ({\n  children,\n\n  // refs\n  navContainerRef,\n  parentScrollContainerRef,\n\n  // throttle\n  scrollThrottle = 300,\n\n  // callback\n  onUpdateCallback,\n\n  // offsets\n  offsetTop = 0,\n  offsetBottom = 0,\n\n  // customize attributes\n  useDataAttribute = \"to-scrollspy-id\",\n  activeClass = \"active-scroll-spy\",\n\n  useBoxMethod = true,\n  updateHistoryStack = true,\n}: ScrollSpyProps) => {\n  const scrollContainerRef = useRef<HTMLDivElement | null>(null);\n  const [navContainerItems, setNavContainerItems] = useState<NodeListOf<Element> | undefined>(); // prettier-ignore\n\n  // keeps track of the Id in navcontainer which is active\n  // so as to not update classLists unless it has been updated\n  const prevIdTracker = useRef(\"\");\n\n  // To get the nav container items depending on whether the parent ref for the nav container is passed or not\n  useEffect(() => {\n    navContainerRef\n      ? setNavContainerItems(\n          navContainerRef.current?.querySelectorAll(\n            `[data-${useDataAttribute}]`\n          )\n        )\n      : setNavContainerItems(\n          document.querySelectorAll(`[data-${useDataAttribute}]`)\n        );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [navContainerRef]);\n\n  // fire once after nav container items are set\n  useEffect(() => {\n    checkAndUpdateActiveScrollSpy();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [navContainerItems]);\n\n  const isVisible = (el: HTMLElement) => {\n    const rectInView = el.getBoundingClientRect();\n\n    if (useBoxMethod) {\n      const useHeight = parentScrollContainerRef?.current\n        ? parentScrollContainerRef?.current.offsetHeight\n        : window.innerHeight;\n      const hitbox_top = useHeight;\n      const element_top = rectInView.top;\n      const element_bottom = rectInView.top + useHeight;\n\n      return (\n        hitbox_top < element_bottom + offsetBottom &&\n        hitbox_top > element_top - offsetTop\n      );\n    } else {\n      // this decides how much of the element should be visible\n      const leniency = parentScrollContainerRef?.current\n        ? parentScrollContainerRef?.current.offsetHeight * 0.5\n        : window.innerHeight * 0.5;\n\n      const useHeight = parentScrollContainerRef?.current\n        ? parentScrollContainerRef?.current.offsetHeight\n        : window.innerHeight;\n\n      return (\n        rectInView.top + leniency + offsetTop >= 0 &&\n        rectInView.bottom - leniency - offsetBottom <= useHeight\n      );\n    }\n  };\n\n  const checkAndUpdateActiveScrollSpy = () => {\n    const scrollParentContainer = scrollContainerRef.current;\n\n    // if there are no children, return\n    if (!(scrollParentContainer && navContainerItems)) return;\n\n    // loop over all children in scroll container\n    for (let i = 0; i < scrollParentContainer.children.length; i++) {\n      // get child element\n      const useChild = scrollParentContainer.children.item(i) as HTMLDivElement;\n\n      const elementIsVisible = isVisible(useChild);\n\n      // check if the element is in the viewport\n      if (elementIsVisible) {\n        // if so, get its ID\n        const changeHighlightedItemId = useChild.id;\n\n        // if the element was same as the one currently active ignore it\n        if (prevIdTracker.current === changeHighlightedItemId) return;\n\n        // now loop over each element in the nav Container\n        navContainerItems.forEach((el) => {\n          const attrId = el.getAttribute(`data-${useDataAttribute}`);\n\n          // if the element contains 'active' the class remove it\n          if (el.classList.contains(activeClass)) {\n            el.classList.remove(activeClass);\n          }\n\n          // check if its ID matches the ID we got from the viewport\n          // also make sure it does not already contain the 'active' class\n          if (\n            attrId === changeHighlightedItemId &&\n            !el.classList.contains(activeClass)\n          ) {\n            el.classList.add(activeClass);\n\n            if (onUpdateCallback) {\n              onUpdateCallback(changeHighlightedItemId);\n            }\n\n            prevIdTracker.current = changeHighlightedItemId;\n            if (updateHistoryStack) {\n              window.history.replaceState(\n                {},\n                \"\",\n                `#${changeHighlightedItemId}`\n              );\n            }\n          }\n        });\n        break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    // listen for scroll event\n    parentScrollContainerRef\n      ? // if ref for scrollable div is provided\n        parentScrollContainerRef.current?.addEventListener(\n          \"scroll\",\n          throttle(checkAndUpdateActiveScrollSpy, scrollThrottle)\n        )\n      : // else listen for scroll in window\n        window.addEventListener(\n          \"scroll\",\n          throttle(checkAndUpdateActiveScrollSpy, scrollThrottle)\n        );\n  });\n\n  return <div ref={scrollContainerRef}>{children}</div>;\n};\n\nexport default ScrollSpy;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}